#pragma checksum "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\Pages\NavDet.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "faa28d21c3c0f96731567152e54a1c83cd3b3028"
// <auto-generated/>
#pragma warning disable 1591
namespace SerAppDataGrid.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\_Imports.razor"
using SerAppDataGrid;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\_Imports.razor"
using SerAppDataGrid.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\_Imports.razor"
using Syncfusion.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\_Imports.razor"
using Syncfusion.Blazor.PivotView;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\Pages\NavDet.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\Pages\NavDet.razor"
using Syncfusion.Blazor.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\Pages\NavDet.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\Pages\NavDet.razor"
using static SerAppDataGrid.Pages.Index1;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\Pages\NavDet.razor"
using Microsoft.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\Pages\NavDet.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\Pages\NavDet.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\Pages\NavDet.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/sample")]
    public partial class NavDet : DataAdaptor<Order>
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __Blazor.SerAppDataGrid.Pages.NavDet.TypeInference.CreateCascadingValue_0(__builder, 0, 1, 
#nullable restore
#line 16 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\Pages\NavDet.razor"
                        this

#line default
#line hidden
#nullable disable
            , 2, (__builder2) => {
                __builder2.AddContent(3, 
#nullable restore
#line 17 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\Pages\NavDet.razor"
     ChildContent

#line default
#line hidden
#nullable disable
                );
            }
            );
        }
        #pragma warning restore 1998
#nullable restore
#line 20 "D:\Program\Syncfusion\DataGrid\SerAppDataGrid\SerAppDataGrid\Pages\NavDet.razor"
       
    [Parameter]
    [JsonIgnore]
    public RenderFragment ChildContent { get; set; }

    public static DataSet CreateCommand(string queryString, string connectionString)
    {
        using (SqlConnection connection = new SqlConnection(
                   connectionString))
        {
            SqlDataAdapter adapter = new SqlDataAdapter(queryString, connection);
            DataSet dt = new DataSet();
            try
            {
                connection.Open();

                // Using sqlDataAdapter, we process the query string and fill the data into the dataset

                adapter.Fill(dt);
            }
            catch (SqlException se)
            {
                Console.WriteLine(se.ToString());
            }
            finally
            {
                connection.Close();
            }
            return dt;
        }
    }

    // Performs data Read operation
    // DataManagerRequest defines the members of the query

    public override object Read(DataManagerRequest DataManagerReq, string Key = null)
    {
    
        string ConnectionStr = $"Data Source=DESKTOP-TAQKU6P\\SQLEXPRESS;Initial Catalog=Orders;Integrated Security=True;Connect Timeout=30";

        // Here, we formed the SQL query string based on the skip and take count from the DataManagerRequest

        string QueryStr = "SELECT OrderID, CustomerID FROM dbo.Orders ORDER BY OrderID OFFSET " + DataManagerReq.Skip + " ROWS FETCH NEXT " + DataManagerReq.Take + " ROWS ONLY;";
        DataSet Data = CreateCommand(QueryStr, ConnectionStr);
        Orders = Data.Tables[0].AsEnumerable().Select(r => new Order
        {
            OrderID = r.Field<Int32>("OrderID"),
            CustomerID = r.Field<string>("CustomerID")
        }).ToList();  // Here, we convert dataset into list
        IEnumerable<Order> DataSource = Orders;
        SqlConnection Con = new SqlConnection(ConnectionStr);
        Con.Open();
        SqlCommand Cmd = new SqlCommand("SELECT COUNT(*) FROM dbo.Orders", Con);
        Int32 Count = (Int32)Cmd.ExecuteScalar();
        return DataManagerReq.RequiresCounts ? new DataResult() { Result = DataSource, Count = Count } : (object)DataSource;
    }


    // Performs Insert operation
    //You will get the DataManager instance in the DataManager parameter
    //You will get the record in the Value parameter

    public override object Insert(DataManager DataManager, object Value, string Key)
    {

        //Here, you can implement your own code to update the record from the grid.

        string ConnectionStr = $"Data Source=DESKTOP-TAQKU6P\\SQLEXPRESS;Initial Catalog=Orders;Integrated Security=True;Connect Timeout=30";
        string QueryStr = $"Insert into Orders(CustomerID) values('{(Value as Order).CustomerID}')";
        SqlConnection Con = new SqlConnection(ConnectionStr);
        try
        {
            Con.Open();
            SqlCommand Cmd = new SqlCommand(QueryStr, Con);
            Cmd.ExecuteNonQuery();
        }
        catch (SqlException Exception)
        {
            Console.WriteLine(Exception.ToString());
        }
        finally
        {
            Con.Close();
        }
        return Value;
    }


    // Performs Update operation
    //You will get the DataManager instance in the DataManager parameter
    //You will get the edited record in the Value parameter
    //You will get the PrimaryKey field in the KeyField parameter

    public override object Update(DataManager DataManager, object Value, string KeyField, string Key)
    {
        //Here, you can implement your own code to update the record from the grid.
        string ConnectionStr = $"Data Source=DESKTOP-TAQKU6P\\SQLEXPRESS;Initial Catalog=Orders;Integrated Security=True;Connect Timeout=30";
        string QueryStr = $"Update Orders set CustomerID='{(Value as Order).CustomerID}' where OrderID={(Value as Order).OrderID}";
        SqlConnection Con = new SqlConnection(ConnectionStr);
        try
        {
            Con.Open();
            SqlCommand Cmd = new SqlCommand(QueryStr, Con);
            Cmd.ExecuteNonQuery();
        }
        catch (SqlException Exception)
        {
            Console.WriteLine(Exception.ToString());
        }
        finally
        {
            Con.Close();
        }
        return Value;
    }


    // Performs Remove operation
    //You will get the DataManager instance in the DataManager parameter
    //You will get the record in the Value parameter
    //You will get the PrimaryKey field in the KeyField parameter

    public override object Remove(DataManager DataManager, object Value, string KeyField, string Key)
    {
        //Here, you can implement your own code to delete the record from the grid.

        string ConnectionStr = $"Data Source=DESKTOP-TAQKU6P\\SQLEXPRESS;Initial Catalog=Orders;Integrated Security=True;Connect Timeout=30";
        string QueryStr = $"Delete from Orders where OrderID={Value}";
        SqlConnection Con = new SqlConnection(ConnectionStr);
        try
        {
            Con.Open();
            SqlCommand Cmd = new SqlCommand(QueryStr, Con);
            Cmd.ExecuteNonQuery();
        }
        catch (SqlException Exception)
        {
            Console.WriteLine(Exception.ToString());
        }
        finally
        {
            Con.Close();
        }
        return Value;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHostingEnvironment _env { get; set; }
    }
}
namespace __Blazor.SerAppDataGrid.Pages.NavDet
{
    #line hidden
    internal static class TypeInference
    {
        public static void CreateCascadingValue_0<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, global::Microsoft.AspNetCore.Components.RenderFragment __arg1)
        {
        __builder.OpenComponent<global::Microsoft.AspNetCore.Components.CascadingValue<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Value", __arg0);
        __builder.AddAttribute(__seq1, "ChildContent", __arg1);
        __builder.CloseComponent();
        }
    }
}
#pragma warning restore 1591
