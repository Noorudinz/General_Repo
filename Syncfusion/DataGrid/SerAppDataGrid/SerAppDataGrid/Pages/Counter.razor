@page "/counter"
@page "/counter1"

@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Primitives;
@using Syncfusion.Blazor.Inputs;

@inject NavigationManager navManager

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<button class="btn btn-primary" @onclick="QueryParams">Query Params</button>

<div class="col-lg-12 control-section">
    <div class="control_wrapper">
        <SfUploader ID="UploadFiles" DropArea=".control-fluid">
            <UploaderEvents OnRemove="OnFileRemove"></UploaderEvents>
            <UploaderAsyncSettings SaveUrl="https://aspnetmvc.syncfusion.com/services/api/uploadbox/Save" RemoveUrl="https://aspnetmvc.syncfusion.com/services/api/uploadbox/Remove"></UploaderAsyncSettings>
        </SfUploader>
    </div>
</div>

<style>
    .control_wrapper {
        width: 350px;
        margin: 0 auto;
    }
</style>

@code {
    public void OnFileRemove(RemovingEventArgs args)
    {
        args.PostRawFile = false;

    }
    private int currentCount = 0;

    protected override void OnInitialized()
    {
        StringValues initCount;
        var uri = navManager.ToAbsoluteUri(navManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("initialCount", out initCount))
        {
            currentCount = Convert.ToInt32(initCount);
        }

    }

    private void IncrementCount()
    {
        currentCount++;
    }

    private void QueryParams()
    {
        var query = new Dictionary<string, string> {
            { "firstname", "Noor" },
            { "lastname", "deen" }
        };
        navManager.NavigateTo(QueryHelpers.AddQueryString("/anothereg", query));
    }

}





@*@using Syncfusion.Blazor.Grids

    <SfGrid ID="grid" EnablePersistence="true" AllowPaging="true" DataSource="@Orders">
        <GridPageSettings PageSize="8"></GridPageSettings>
        <GridColumns>
            <GridColumn Field=@nameof(Order.OrderID) HeaderText="Order ID" Width="100"></GridColumn>
            <GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer Name" Width="120"></GridColumn>
            <GridColumn Field=@nameof(Order.OrderDate) HeaderText=" Order Date" Format="d" Width="100"></GridColumn>
            <GridColumn Field=@nameof(Order.Freight) Format="C2" Width="120"></GridColumn>
        </GridColumns>
    </SfGrid>

    <ToDoList></ToDoList>

    @code {
        public List<Order> Orders { get; set; }

        protected override async Task OnInitializedAsync()
        {
            await base.OnInitializedAsync();
            Orders = Enumerable.Range(1, 25).Select(x => new Order()
            {
                OrderID = 1000 + x,
                CustomerID = (new string[] { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" })[new Random().Next(5)],
                Freight = 2.1 * x,
                OrderDate = DateTime.Now.AddDays(-x),
            }).ToList();
        }

        public class Order
        {
            public int? OrderID { get; set; }
            public string CustomerID { get; set; }
            public DateTime? OrderDate { get; set; }
            public double? Freight { get; set; }
        }
    }*@