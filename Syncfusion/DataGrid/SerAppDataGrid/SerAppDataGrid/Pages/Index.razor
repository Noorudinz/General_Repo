@page "/"

@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@*<SfGrid DataSource="@OrderList" AllowPaging="true"
    AllowSorting="true"
    AllowGrouping="true"
    AllowFiltering="true">*@



<SfGrid ID="Grid" @ref="DefaultGrid" DataSource="OrderList" Toolbar="@(new List<string>() { "ExcelExport","PdfExport","Search" })"
        AllowPaging="true"
        AllowExcelExport="true"
        AllowPdfExport="true">
    <SfToolbar>
        <ToolbarItems>
            <ToolbarItem Type="ItemType.Input" Align="Syncfusion.Blazor.Navigations.ItemAlign.Right">
                <Template>
                    <SfTextBox Placeholder="Enter values to search" Input="OnInput"></SfTextBox>
                    <span class="e-search-icon e-icons"></span>
                </Template>
            </ToolbarItem>
        </ToolbarItems>
    </SfToolbar>

    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
    <GridPageSettings PageSize="5" PageSizes="true">
    </GridPageSettings>
    @*<SfDataManager Url="https://some.com/invalidUrl" Adaptor="Adaptors.WebApiAdaptor"></SfDataManager>*@
    <GridColumns>
        <GridColumn Field="@nameof(Orders.OrderId)" IsPrimaryKey="true"
                    HeaderText="Order Id"
                    TextAlign="TextAlign.Left"
                    Width="120"
                    ValidationRules="@(new ValidationRules{ Required=true, Number=true})">
        </GridColumn>
        <GridColumn Field="@nameof(Orders.CustomerId)"
                    HeaderText="Customer Name"
                    TextAlign="TextAlign.Left"
                    ValidationRules="@(new ValidationRules{ Required=true})" Width="150">
        </GridColumn>
        <GridColumn Field="@nameof(Orders.OrderDate)"
                    HeaderText="Order Date"
                    TextAlign="TextAlign.Left"
                    Format="d"
                    Type="ColumnType.Date"
                    EditType="EditType.DatePickerEdit"
                    Width="140">
        </GridColumn>
        <GridColumn Field="@nameof(Orders.Freight)"
                    HeaderText="Freight"
                    Format="C2"
                    TextAlign="TextAlign.Left"
                    ValidationRules="@(new ValidationRules{ Required=true, Range = new double[]{1, 1000}})" EditType="EditType.NumericEdit"
                    Width="120">
        </GridColumn>
        <GridColumn HeaderText="Manage Records" Width="150">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-edit", CssClass="e-flat" })"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat" })"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-save", CssClass="e-flat" })"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-cancel-icon", CssClass="e-flat" })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>

<style>
    .error {
        color: red;
    }
</style>


@code{

    public List<Orders> OrderList { get; set; }


    protected override void OnInitialized()
    {
        
        OrderList = Enumerable.Range(1, 75).Select(x => new Orders()
        {
            OrderId = 1000 + x,
            CustomerId = (new string[] { "NOOR", "RAM", "VINOTH", "KUMAR", "ROBERT" })[new Random().Next(5)],
            Freight = 2.1 * x,
            OrderDate = DateTime.Now.AddDays(-x),
        }).ToList();
    }

    public class Orders
    {
        public int? OrderId { get; set; }
        public string CustomerId { get; set; }
        public DateTime? OrderDate { get; set; }
        public double? Freight { get; set; }
    }
    SfGrid<Orders> Grid;
    public async Task ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "PDF Export")
        {
            await this.Grid.ExportToPdfAsync();
        }
        if (args.Item.Text == "Excel Export")
        {
            await this.Grid.ExportToExcelAsync();
        }
    }
    private SfGrid<Orders> DefaultGrid;

    public void OnInput(InputEventArgs args)
    {
        this.DefaultGrid.Search(args.Value);
    }

}



